---
source: src/visit.rs
expression: list_output
---
src/main.rs: replace main -> Result<()> with Ok(())
src/main.rs: replace main -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/build_dir.rs: replace BuildDir::copy_from -> Result<BuildDir> with Ok(Default::default())
src/build_dir.rs: replace BuildDir::copy_from -> Result<BuildDir> with Err(::anyhow::anyhow!("mutated!"))
src/build_dir.rs: replace BuildDir::in_place -> Result<BuildDir> with Ok(Default::default())
src/build_dir.rs: replace BuildDir::in_place -> Result<BuildDir> with Err(::anyhow::anyhow!("mutated!"))
src/build_dir.rs: replace BuildDir::path -> &Utf8Path with &Default::default()
src/cargo.rs: replace run_cargo -> Result<PhaseResult> with Ok(Default::default())
src/cargo.rs: replace run_cargo -> Result<PhaseResult> with Err(::anyhow::anyhow!("mutated!"))
src/cargo.rs: replace cargo_bin -> String with String::new()
src/cargo.rs: replace cargo_bin -> String with "xyzzy".into()
src/cargo.rs: replace cargo_argv -> Vec<String> with vec![]
src/cargo.rs: replace cargo_argv -> Vec<String> with vec![String::new()]
src/cargo.rs: replace cargo_argv -> Vec<String> with vec!["xyzzy".into()]
src/cargo.rs: replace == with != in cargo_argv
src/cargo.rs: replace == with != in cargo_argv
src/cargo.rs: replace rustflags -> String with String::new()
src/cargo.rs: replace rustflags -> String with "xyzzy".into()
src/cargo.rs: replace == with != in rustflags
src/config.rs: replace Config::read_file -> Result<Config> with Ok(Default::default())
src/config.rs: replace Config::read_file -> Result<Config> with Err(::anyhow::anyhow!("mutated!"))
src/config.rs: replace Config::read_tree_config -> Result<Config> with Ok(Default::default())
src/config.rs: replace Config::read_tree_config -> Result<Config> with Err(::anyhow::anyhow!("mutated!"))
src/copy_tree.rs: replace copy_tree -> Result<TempDir> with Ok(Default::default())
src/copy_tree.rs: replace copy_tree -> Result<TempDir> with Err(::anyhow::anyhow!("mutated!"))
src/copy_tree.rs: replace += with -= in copy_tree
src/copy_tree.rs: replace += with *= in copy_tree
src/copy_tree.rs: replace += with -= in copy_tree
src/copy_tree.rs: replace += with *= in copy_tree
src/copy_tree.rs: replace copy_symlink -> Result<()> with Ok(())
src/copy_tree.rs: replace copy_symlink -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/fnvalue.rs: replace return_type_replacements -> Vec<TokenStream> with vec![]
src/fnvalue.rs: replace return_type_replacements -> Vec<TokenStream> with vec![Default::default()]
src/fnvalue.rs: replace type_replacements -> impl Iterator<Item = TokenStream> with ::std::iter::empty()
src/fnvalue.rs: replace type_replacements -> impl Iterator<Item = TokenStream> with ::std::iter::once(Default::default())
src/fnvalue.rs: replace path_ends_with -> bool with true
src/fnvalue.rs: replace path_ends_with -> bool with false
src/fnvalue.rs: replace == with != in path_ends_with
src/fnvalue.rs: replace match_impl_iterator -> Option<&Type> with None
src/fnvalue.rs: replace match_impl_iterator -> Option<&Type> with Some(&Default::default())
src/fnvalue.rs: replace && with || in match_impl_iterator
src/fnvalue.rs: replace == with != in match_impl_iterator
src/fnvalue.rs: replace == with != in match_impl_iterator
src/fnvalue.rs: replace == with != in match_impl_iterator
src/fnvalue.rs: replace known_container -> Option<(&Ident, &Type)> with None
src/fnvalue.rs: replace known_container -> Option<(&Ident, &Type)> with Some((&Default::default(), &Default::default()))
src/fnvalue.rs: replace == with != in known_container
src/fnvalue.rs: replace == with != in known_container
src/fnvalue.rs: replace known_collection -> Option<(&Ident, &Type)> with None
src/fnvalue.rs: replace known_collection -> Option<(&Ident, &Type)> with Some((&Default::default(), &Default::default()))
src/fnvalue.rs: replace == with != in known_collection
src/fnvalue.rs: replace == with != in known_collection
src/fnvalue.rs: replace known_map -> Option<(&Ident, &Type, &Type)> with None
src/fnvalue.rs: replace known_map -> Option<(&Ident, &Type, &Type)> with Some((&Default::default(), &Default::default(), &Default::default()))
src/fnvalue.rs: replace == with != in known_map
src/fnvalue.rs: replace maybe_collection_or_container -> Option<(&Ident, &Type)> with None
src/fnvalue.rs: replace maybe_collection_or_container -> Option<(&Ident, &Type)> with Some((&Default::default(), &Default::default()))
src/fnvalue.rs: replace == with != in maybe_collection_or_container
src/fnvalue.rs: replace path_is_float -> bool with true
src/fnvalue.rs: replace path_is_float -> bool with false
src/fnvalue.rs: replace path_is_unsigned -> bool with true
src/fnvalue.rs: replace path_is_unsigned -> bool with false
src/fnvalue.rs: replace path_is_signed -> bool with true
src/fnvalue.rs: replace path_is_signed -> bool with false
src/fnvalue.rs: replace path_is_nonzero_signed -> bool with true
src/fnvalue.rs: replace path_is_nonzero_signed -> bool with false
src/fnvalue.rs: replace path_is_nonzero_unsigned -> bool with true
src/fnvalue.rs: replace path_is_nonzero_unsigned -> bool with false
src/fnvalue.rs: replace match_first_type_arg -> Option<&'p Type> with None
src/fnvalue.rs: replace match_first_type_arg -> Option<&'p Type> with Some(&Default::default())
src/fnvalue.rs: replace == with != in match_first_type_arg
src/in_diff.rs: replace diff_filter -> Result<Vec<Mutant>> with Ok(vec![])
src/in_diff.rs: replace diff_filter -> Result<Vec<Mutant>> with Ok(vec![Default::default()])
src/in_diff.rs: replace diff_filter -> Result<Vec<Mutant>> with Err(::anyhow::anyhow!("mutated!"))
src/in_diff.rs: replace == with != in diff_filter
src/in_diff.rs: replace check_diff_new_text_matches -> Result<()> with Ok(())
src/in_diff.rs: replace check_diff_new_text_matches -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/in_diff.rs: replace - with + in check_diff_new_text_matches
src/in_diff.rs: replace - with / in check_diff_new_text_matches
src/in_diff.rs: replace != with == in check_diff_new_text_matches
src/in_diff.rs: replace strip_patch_path -> &Utf8Path with &Default::default()
src/in_diff.rs: replace affected_lines -> Vec<usize> with vec![]
src/in_diff.rs: replace affected_lines -> Vec<usize> with vec![0]
src/in_diff.rs: replace affected_lines -> Vec<usize> with vec![1]
src/in_diff.rs: replace += with -= in affected_lines
src/in_diff.rs: replace += with *= in affected_lines
src/in_diff.rs: replace < with == in affected_lines
src/in_diff.rs: replace < with > in affected_lines
src/in_diff.rs: replace += with -= in affected_lines
src/in_diff.rs: replace += with *= in affected_lines
src/in_diff.rs: replace && with || in affected_lines
src/in_diff.rs: replace > with == in affected_lines
src/in_diff.rs: replace > with < in affected_lines
src/in_diff.rs: replace < with == in affected_lines
src/in_diff.rs: replace < with > in affected_lines
src/in_diff.rs: replace - with + in affected_lines
src/in_diff.rs: replace - with / in affected_lines
src/in_diff.rs: replace - with + in affected_lines
src/in_diff.rs: replace - with / in affected_lines
src/in_diff.rs: replace partial_new_file -> Vec<(usize, &'d str)> with vec![]
src/in_diff.rs: replace partial_new_file -> Vec<(usize, &'d str)> with vec![(0, "")]
src/in_diff.rs: replace partial_new_file -> Vec<(usize, &'d str)> with vec![(0, "xyzzy")]
src/in_diff.rs: replace partial_new_file -> Vec<(usize, &'d str)> with vec![(1, "")]
src/in_diff.rs: replace partial_new_file -> Vec<(usize, &'d str)> with vec![(1, "xyzzy")]
src/in_diff.rs: replace += with -= in partial_new_file
src/in_diff.rs: replace += with *= in partial_new_file
src/interrupt.rs: replace install_handler with ()
src/lab.rs: replace test_mutants -> Result<LabOutcome> with Ok(Default::default())
src/lab.rs: replace test_mutants -> Result<LabOutcome> with Err(::anyhow::anyhow!("mutated!"))
src/lab.rs: replace - with + in test_mutants
src/lab.rs: replace - with / in test_mutants
src/lab.rs: replace == with != in test_mutants
src/lab.rs: replace == with != in test_mutants
src/lab.rs: replace test_timeout -> Duration with Default::default()
src/lab.rs: replace == with != in test_timeout
src/lab.rs: replace * with + in test_timeout
src/lab.rs: replace * with / in test_timeout
src/lab.rs: replace test_scenario -> Result<ScenarioOutcome> with Ok(Default::default())
src/lab.rs: replace test_scenario -> Result<ScenarioOutcome> with Err(::anyhow::anyhow!("mutated!"))
src/lab.rs: replace || with && in test_scenario
src/lab.rs: replace && with || in test_scenario
src/lab.rs: replace == with != in test_scenario
src/list.rs: replace <impl Write for FmtToIoWrite<W>>::write_str -> Result<(), fmt::Error> with Ok(())
src/list.rs: replace <impl Write for FmtToIoWrite<W>>::write_str -> Result<(), fmt::Error> with Err(::anyhow::anyhow!("mutated!"))
src/list.rs: replace list_mutants -> Result<()> with Ok(())
src/list.rs: replace list_mutants -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/list.rs: replace list_files -> Result<()> with Ok(())
src/list.rs: replace list_files -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/log_file.rs: replace LogFile::create_in -> Result<LogFile> with Ok(Default::default())
src/log_file.rs: replace LogFile::create_in -> Result<LogFile> with Err(::anyhow::anyhow!("mutated!"))
src/log_file.rs: replace == with != in LogFile::create_in
src/log_file.rs: replace == with != in LogFile::create_in
src/log_file.rs: replace LogFile::open_append -> Result<File> with Ok(Default::default())
src/log_file.rs: replace LogFile::open_append -> Result<File> with Err(::anyhow::anyhow!("mutated!"))
src/log_file.rs: replace LogFile::message with ()
src/log_file.rs: replace LogFile::path -> &Utf8Path with &Default::default()
src/log_file.rs: replace clean_filename -> String with String::new()
src/log_file.rs: replace clean_filename -> String with "xyzzy".into()
src/manifest.rs: replace fix_manifest -> Result<()> with Ok(())
src/manifest.rs: replace fix_manifest -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/manifest.rs: replace fix_manifest_toml -> Result<Option<toml::Value>> with Ok(None)
src/manifest.rs: replace fix_manifest_toml -> Result<Option<toml::Value>> with Ok(Some(Default::default()))
src/manifest.rs: replace fix_manifest_toml -> Result<Option<toml::Value>> with Err(::anyhow::anyhow!("mutated!"))
src/manifest.rs: replace == with != in fix_manifest_toml
src/manifest.rs: replace fix_dependency_table with ()
src/manifest.rs: replace fix_cargo_config -> Result<()> with Ok(())
src/manifest.rs: replace fix_cargo_config -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/manifest.rs: replace fix_cargo_config_toml -> Result<Option<String>> with Ok(None)
src/manifest.rs: replace fix_cargo_config_toml -> Result<Option<String>> with Ok(Some(String::new()))
src/manifest.rs: replace fix_cargo_config_toml -> Result<Option<String>> with Ok(Some("xyzzy".into()))
src/manifest.rs: replace fix_cargo_config_toml -> Result<Option<String>> with Err(::anyhow::anyhow!("mutated!"))
src/manifest.rs: replace fix_path -> Option<String> with None
src/manifest.rs: replace fix_path -> Option<String> with Some(String::new())
src/manifest.rs: replace fix_path -> Option<String> with Some("xyzzy".into())
src/manifest.rs: replace || with && in fix_path
src/manifest.rs: replace == with != in fix_path
src/mutate.rs: replace Mutant::mutated_code -> String with String::new()
src/mutate.rs: replace Mutant::mutated_code -> String with "xyzzy".into()
src/mutate.rs: replace Mutant::describe_change -> String with String::new()
src/mutate.rs: replace Mutant::describe_change -> String with "xyzzy".into()
src/mutate.rs: replace Mutant::name -> String with String::new()
src/mutate.rs: replace Mutant::name -> String with "xyzzy".into()
src/mutate.rs: replace Mutant::styled_parts -> Vec<StyledObject<String>> with vec![]
src/mutate.rs: replace Mutant::styled_parts -> Vec<StyledObject<String>> with vec![StyledObject::new()]
src/mutate.rs: replace Mutant::styled_parts -> Vec<StyledObject<String>> with vec![StyledObject::from_iter([String::new()])]
src/mutate.rs: replace Mutant::styled_parts -> Vec<StyledObject<String>> with vec![StyledObject::new(String::new())]
src/mutate.rs: replace Mutant::styled_parts -> Vec<StyledObject<String>> with vec![StyledObject::from(String::new())]
src/mutate.rs: replace Mutant::styled_parts -> Vec<StyledObject<String>> with vec![StyledObject::from_iter(["xyzzy".into()])]
src/mutate.rs: replace Mutant::styled_parts -> Vec<StyledObject<String>> with vec![StyledObject::new("xyzzy".into())]
src/mutate.rs: replace Mutant::styled_parts -> Vec<StyledObject<String>> with vec![StyledObject::from("xyzzy".into())]
src/mutate.rs: replace Mutant::styled_parts::s -> StyledObject<String> with StyledObject::new()
src/mutate.rs: replace Mutant::styled_parts::s -> StyledObject<String> with StyledObject::from_iter([String::new()])
src/mutate.rs: replace Mutant::styled_parts::s -> StyledObject<String> with StyledObject::new(String::new())
src/mutate.rs: replace Mutant::styled_parts::s -> StyledObject<String> with StyledObject::from(String::new())
src/mutate.rs: replace Mutant::styled_parts::s -> StyledObject<String> with StyledObject::from_iter(["xyzzy".into()])
src/mutate.rs: replace Mutant::styled_parts::s -> StyledObject<String> with StyledObject::new("xyzzy".into())
src/mutate.rs: replace Mutant::styled_parts::s -> StyledObject<String> with StyledObject::from("xyzzy".into())
src/mutate.rs: replace == with != in Mutant::styled_parts
src/mutate.rs: replace Mutant::original_text -> String with String::new()
src/mutate.rs: replace Mutant::original_text -> String with "xyzzy".into()
src/mutate.rs: replace Mutant::replacement_text -> &str with ""
src/mutate.rs: replace Mutant::replacement_text -> &str with "xyzzy"
src/mutate.rs: replace Mutant::package_name -> &str with ""
src/mutate.rs: replace Mutant::package_name -> &str with "xyzzy"
src/mutate.rs: replace Mutant::package -> &Package with &Default::default()
src/mutate.rs: replace Mutant::diff -> String with String::new()
src/mutate.rs: replace Mutant::diff -> String with "xyzzy".into()
src/mutate.rs: replace Mutant::apply -> Result<AppliedMutant> with Ok(Default::default())
src/mutate.rs: replace Mutant::apply -> Result<AppliedMutant> with Err(::anyhow::anyhow!("mutated!"))
src/mutate.rs: replace Mutant::unapply -> Result<()> with Ok(())
src/mutate.rs: replace Mutant::unapply -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/mutate.rs: replace Mutant::write_in_dir -> Result<()> with Ok(())
src/mutate.rs: replace Mutant::write_in_dir -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/mutate.rs: replace Mutant::log_file_name_base -> String with String::new()
src/mutate.rs: replace Mutant::log_file_name_base -> String with "xyzzy".into()
src/mutate.rs: replace <impl Debug for Mutant>::fmt -> fmt::Result with Ok(Default::default())
src/mutate.rs: replace <impl Debug for Mutant>::fmt -> fmt::Result with Err(::anyhow::anyhow!("mutated!"))
src/mutate.rs: replace <impl Serialize for Mutant>::serialize -> Result<S::Ok, S::Error> with Ok(Default::default())
src/mutate.rs: replace <impl Serialize for Mutant>::serialize -> Result<S::Ok, S::Error> with Err(::anyhow::anyhow!("mutated!"))
src/mutate.rs: replace <impl Drop for AppliedMutant<'_>>::drop with ()
src/options.rs: replace join_slices -> Vec<String> with vec![]
src/options.rs: replace join_slices -> Vec<String> with vec![String::new()]
src/options.rs: replace join_slices -> Vec<String> with vec!["xyzzy".into()]
src/options.rs: replace + with - in join_slices
src/options.rs: replace + with * in join_slices
src/options.rs: replace Colors::forced_value -> Option<bool> with None
src/options.rs: replace Colors::forced_value -> Option<bool> with Some(true)
src/options.rs: replace Colors::forced_value -> Option<bool> with Some(false)
src/options.rs: replace != with == in Colors::forced_value
src/options.rs: replace != with == in Colors::forced_value
src/options.rs: replace Colors::active_stdout -> bool with true
src/options.rs: replace Colors::active_stdout -> bool with false
src/options.rs: replace or_slices -> &'c[T] with Vec::leak(Vec::new())
src/options.rs: replace or_slices -> &'c[T] with Vec::leak(vec![Default::default()])
src/options.rs: replace build_glob_set -> Result<Option<GlobSet>> with Ok(None)
src/options.rs: replace build_glob_set -> Result<Option<GlobSet>> with Ok(Some(Default::default()))
src/options.rs: replace build_glob_set -> Result<Option<GlobSet>> with Err(::anyhow::anyhow!("mutated!"))
src/options.rs: replace || with && in build_glob_set
src/outcome.rs: replace Phase::name -> &'static str with ""
src/outcome.rs: replace Phase::name -> &'static str with "xyzzy"
src/outcome.rs: replace <impl Display for Phase>::fmt -> fmt::Result with Ok(Default::default())
src/outcome.rs: replace <impl Display for Phase>::fmt -> fmt::Result with Err(::anyhow::anyhow!("mutated!"))
src/outcome.rs: replace LabOutcome::add with ()
src/outcome.rs: replace += with -= in LabOutcome::add
src/outcome.rs: replace += with *= in LabOutcome::add
src/outcome.rs: replace += with -= in LabOutcome::add
src/outcome.rs: replace += with *= in LabOutcome::add
src/outcome.rs: replace += with -= in LabOutcome::add
src/outcome.rs: replace += with *= in LabOutcome::add
src/outcome.rs: replace += with -= in LabOutcome::add
src/outcome.rs: replace += with *= in LabOutcome::add
src/outcome.rs: replace += with -= in LabOutcome::add
src/outcome.rs: replace += with *= in LabOutcome::add
src/outcome.rs: replace += with -= in LabOutcome::add
src/outcome.rs: replace += with *= in LabOutcome::add
src/outcome.rs: replace += with -= in LabOutcome::add
src/outcome.rs: replace += with *= in LabOutcome::add
src/outcome.rs: replace LabOutcome::exit_code -> i32 with 0
src/outcome.rs: replace LabOutcome::exit_code -> i32 with 1
src/outcome.rs: replace LabOutcome::exit_code -> i32 with -1
src/outcome.rs: replace && with || in LabOutcome::exit_code
src/outcome.rs: replace > with == in LabOutcome::exit_code
src/outcome.rs: replace > with < in LabOutcome::exit_code
src/outcome.rs: replace > with == in LabOutcome::exit_code
src/outcome.rs: replace > with < in LabOutcome::exit_code
src/outcome.rs: replace LabOutcome::summary_string -> String with String::new()
src/outcome.rs: replace LabOutcome::summary_string -> String with "xyzzy".into()
src/outcome.rs: replace > with == in LabOutcome::summary_string
src/outcome.rs: replace > with < in LabOutcome::summary_string
src/outcome.rs: replace > with == in LabOutcome::summary_string
src/outcome.rs: replace > with < in LabOutcome::summary_string
src/outcome.rs: replace > with == in LabOutcome::summary_string
src/outcome.rs: replace > with < in LabOutcome::summary_string
src/outcome.rs: replace > with == in LabOutcome::summary_string
src/outcome.rs: replace > with < in LabOutcome::summary_string
src/outcome.rs: replace > with == in LabOutcome::summary_string
src/outcome.rs: replace > with < in LabOutcome::summary_string
src/outcome.rs: replace > with == in LabOutcome::summary_string
src/outcome.rs: replace > with < in LabOutcome::summary_string
src/outcome.rs: replace <impl Serialize for ScenarioOutcome>::serialize -> Result<S::Ok, S::Error> with Ok(Default::default())
src/outcome.rs: replace <impl Serialize for ScenarioOutcome>::serialize -> Result<S::Ok, S::Error> with Err(::anyhow::anyhow!("mutated!"))
src/outcome.rs: replace ScenarioOutcome::add_phase_result with ()
src/outcome.rs: replace ScenarioOutcome::get_log_content -> Result<String> with Ok(String::new())
src/outcome.rs: replace ScenarioOutcome::get_log_content -> Result<String> with Ok("xyzzy".into())
src/outcome.rs: replace ScenarioOutcome::get_log_content -> Result<String> with Err(::anyhow::anyhow!("mutated!"))
src/outcome.rs: replace ScenarioOutcome::last_phase -> Phase with Default::default()
src/outcome.rs: replace ScenarioOutcome::last_phase_result -> ProcessStatus with Default::default()
src/outcome.rs: replace ScenarioOutcome::phase_results -> &[PhaseResult] with Vec::leak(Vec::new())
src/outcome.rs: replace ScenarioOutcome::phase_results -> &[PhaseResult] with Vec::leak(vec![Default::default()])
src/outcome.rs: replace ScenarioOutcome::total_phase_duration -> Duration with Default::default()
src/outcome.rs: replace == with != in ScenarioOutcome::total_phase_duration
src/outcome.rs: replace ScenarioOutcome::should_show_logs -> bool with true
src/outcome.rs: replace ScenarioOutcome::should_show_logs -> bool with false
src/outcome.rs: replace && with || in ScenarioOutcome::should_show_logs
src/outcome.rs: replace ScenarioOutcome::success -> bool with true
src/outcome.rs: replace ScenarioOutcome::success -> bool with false
src/outcome.rs: replace ScenarioOutcome::has_timeout -> bool with true
src/outcome.rs: replace ScenarioOutcome::has_timeout -> bool with false
src/outcome.rs: replace ScenarioOutcome::check_or_build_failed -> bool with true
src/outcome.rs: replace ScenarioOutcome::check_or_build_failed -> bool with false
src/outcome.rs: replace && with || in ScenarioOutcome::check_or_build_failed
src/outcome.rs: replace != with == in ScenarioOutcome::check_or_build_failed
src/outcome.rs: replace == with != in ScenarioOutcome::check_or_build_failed
src/outcome.rs: replace ScenarioOutcome::mutant_caught -> bool with true
src/outcome.rs: replace ScenarioOutcome::mutant_caught -> bool with false
src/outcome.rs: replace && with || in ScenarioOutcome::mutant_caught
src/outcome.rs: replace && with || in ScenarioOutcome::mutant_caught
src/outcome.rs: replace == with != in ScenarioOutcome::mutant_caught
src/outcome.rs: replace == with != in ScenarioOutcome::mutant_caught
src/outcome.rs: replace ScenarioOutcome::mutant_missed -> bool with true
src/outcome.rs: replace ScenarioOutcome::mutant_missed -> bool with false
src/outcome.rs: replace && with || in ScenarioOutcome::mutant_missed
src/outcome.rs: replace && with || in ScenarioOutcome::mutant_missed
src/outcome.rs: replace == with != in ScenarioOutcome::mutant_missed
src/outcome.rs: replace ScenarioOutcome::summary -> SummaryOutcome with Default::default()
src/outcome.rs: replace PhaseResult::is_success -> bool with true
src/outcome.rs: replace PhaseResult::is_success -> bool with false
src/outcome.rs: replace <impl Serialize for PhaseResult>::serialize -> Result<S::Ok, S::Error> with Ok(Default::default())
src/outcome.rs: replace <impl Serialize for PhaseResult>::serialize -> Result<S::Ok, S::Error> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace LockFile::acquire_lock -> Result<File> with Ok(Default::default())
src/output.rs: replace LockFile::acquire_lock -> Result<File> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace == with != in LockFile::acquire_lock
src/output.rs: replace OutputDir::create_log -> Result<LogFile> with Ok(Default::default())
src/output.rs: replace OutputDir::create_log -> Result<LogFile> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace OutputDir::path -> &Utf8Path with &Default::default()
src/output.rs: replace OutputDir::write_lab_outcome -> Result<()> with Ok(())
src/output.rs: replace OutputDir::write_lab_outcome -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace OutputDir::add_scenario_outcome -> Result<()> with Ok(())
src/output.rs: replace OutputDir::add_scenario_outcome -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace OutputDir::open_debug_log -> Result<File> with Ok(Default::default())
src/output.rs: replace OutputDir::open_debug_log -> Result<File> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace OutputDir::write_mutants_list -> Result<()> with Ok(())
src/output.rs: replace OutputDir::write_mutants_list -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace OutputDir::take_lab_outcome -> LabOutcome with Default::default()
src/path.rs: replace ascent -> isize with 0
src/path.rs: replace ascent -> isize with 1
src/path.rs: replace ascent -> isize with -1
src/path.rs: replace == with != in ascent
src/path.rs: replace += with -= in ascent
src/path.rs: replace += with *= in ascent
src/path.rs: replace != with == in ascent
src/path.rs: replace -= with += in ascent
src/path.rs: replace -= with /= in ascent
src/path.rs: replace > with == in ascent
src/path.rs: replace > with < in ascent
src/path.rs: replace <impl Utf8PathSlashes for Utf8Path>::to_slash_path -> String with String::new()
src/path.rs: replace <impl Utf8PathSlashes for Utf8Path>::to_slash_path -> String with "xyzzy".into()
src/path.rs: replace || with && in <impl Utf8PathSlashes for Utf8Path>::to_slash_path
src/path.rs: replace == with != in <impl Utf8PathSlashes for Utf8Path>::to_slash_path
src/path.rs: replace == with != in <impl Utf8PathSlashes for Utf8Path>::to_slash_path
src/pretty.rs: replace <impl ToPrettyString for T>::to_pretty_string -> String with String::new()
src/pretty.rs: replace <impl ToPrettyString for T>::to_pretty_string -> String with "xyzzy".into()
src/pretty.rs: replace && with || in <impl ToPrettyString for T>::to_pretty_string
src/pretty.rs: replace || with && in <impl ToPrettyString for T>::to_pretty_string
src/pretty.rs: replace || with && in <impl ToPrettyString for T>::to_pretty_string
src/pretty.rs: replace == with != in <impl ToPrettyString for T>::to_pretty_string
src/pretty.rs: replace == with != in <impl ToPrettyString for T>::to_pretty_string
src/pretty.rs: replace || with && in <impl ToPrettyString for T>::to_pretty_string
src/pretty.rs: replace += with -= in <impl ToPrettyString for T>::to_pretty_string
src/pretty.rs: replace += with *= in <impl ToPrettyString for T>::to_pretty_string
src/process.rs: replace Process::run -> Result<ProcessStatus> with Ok(Default::default())
src/process.rs: replace Process::run -> Result<ProcessStatus> with Err(::anyhow::anyhow!("mutated!"))
src/process.rs: replace Process::start -> Result<Process> with Ok(Default::default())
src/process.rs: replace Process::start -> Result<Process> with Err(::anyhow::anyhow!("mutated!"))
src/process.rs: replace Process::terminate -> Result<()> with Ok(())
src/process.rs: replace Process::terminate -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/process.rs: replace terminate_child_impl -> Result<()> with Ok(())
src/process.rs: replace terminate_child_impl -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/process.rs: replace != with == in terminate_child_impl
src/process.rs: replace ProcessStatus::success -> bool with true
src/process.rs: replace ProcessStatus::success -> bool with false
src/process.rs: replace == with != in ProcessStatus::success
src/process.rs: replace ProcessStatus::timeout -> bool with true
src/process.rs: replace ProcessStatus::timeout -> bool with false
src/process.rs: replace == with != in ProcessStatus::timeout
src/process.rs: replace setpgid_on_unix -> PopenConfig with Default::default()
src/process.rs: replace get_command_output -> Result<String> with Ok(String::new())
src/process.rs: replace get_command_output -> Result<String> with Ok("xyzzy".into())
src/process.rs: replace get_command_output -> Result<String> with Err(::anyhow::anyhow!("mutated!"))
src/process.rs: replace cheap_shell_quote -> String with String::new()
src/process.rs: replace cheap_shell_quote -> String with "xyzzy".into()
src/scenario.rs: replace <impl Display for Scenario>::fmt -> fmt::Result with Ok(Default::default())
src/scenario.rs: replace <impl Display for Scenario>::fmt -> fmt::Result with Err(::anyhow::anyhow!("mutated!"))
src/scenario.rs: replace Scenario::is_mutant -> bool with true
src/scenario.rs: replace Scenario::is_mutant -> bool with false
src/scenario.rs: replace Scenario::mutant -> Option<&Mutant> with None
src/scenario.rs: replace Scenario::mutant -> Option<&Mutant> with Some(&Default::default())
src/scenario.rs: replace Scenario::log_file_name_base -> String with String::new()
src/scenario.rs: replace Scenario::log_file_name_base -> String with "xyzzy".into()
src/shard.rs: replace Shard::select -> Vec<M> with vec![]
src/shard.rs: replace Shard::select -> Vec<M> with vec![Default::default()]
src/shard.rs: replace == with != in Shard::select
src/shard.rs: replace % with / in Shard::select
src/shard.rs: replace % with + in Shard::select
src/shard.rs: replace <impl FromStr for Shard>::from_str -> Result<Self, Self::Err> with Ok(Default::default())
src/shard.rs: replace <impl FromStr for Shard>::from_str -> Result<Self, Self::Err> with Err(::anyhow::anyhow!("mutated!"))
src/source.rs: replace SourceFile::tree_relative_slashes -> String with String::new()
src/source.rs: replace SourceFile::tree_relative_slashes -> String with "xyzzy".into()
src/source.rs: replace SourceFile::path -> &Utf8Path with &Default::default()
src/source.rs: replace SourceFile::code -> &str with ""
src/source.rs: replace SourceFile::code -> &str with "xyzzy"
src/span.rs: replace <impl From for LineColumn>::from -> Self with Default::default()
src/span.rs: replace + with - in <impl From for LineColumn>::from
src/span.rs: replace + with * in <impl From for LineColumn>::from
src/span.rs: replace <impl Debug for LineColumn>::fmt -> fmt::Result with Ok(Default::default())
src/span.rs: replace <impl Debug for LineColumn>::fmt -> fmt::Result with Err(::anyhow::anyhow!("mutated!"))
src/span.rs: replace Span::quad -> Self with Default::default()
src/span.rs: replace Span::extract -> String with String::new()
src/span.rs: replace Span::extract -> String with "xyzzy".into()
src/span.rs: replace && with || in Span::extract
src/span.rs: replace || with && in Span::extract
src/span.rs: replace && with || in Span::extract
src/span.rs: replace == with != in Span::extract
src/span.rs: replace >= with < in Span::extract
src/span.rs: replace > with == in Span::extract
src/span.rs: replace > with < in Span::extract
src/span.rs: replace || with && in Span::extract
src/span.rs: replace < with == in Span::extract
src/span.rs: replace < with > in Span::extract
src/span.rs: replace && with || in Span::extract
src/span.rs: replace == with != in Span::extract
src/span.rs: replace < with == in Span::extract
src/span.rs: replace < with > in Span::extract
src/span.rs: replace == with != in Span::extract
src/span.rs: replace += with -= in Span::extract
src/span.rs: replace += with *= in Span::extract
src/span.rs: replace > with == in Span::extract
src/span.rs: replace > with < in Span::extract
src/span.rs: replace == with != in Span::extract
src/span.rs: replace += with -= in Span::extract
src/span.rs: replace += with *= in Span::extract
src/span.rs: replace && with || in Span::extract
src/span.rs: replace == with != in Span::extract
src/span.rs: replace >= with < in Span::extract
src/span.rs: replace Span::replace -> String with String::new()
src/span.rs: replace Span::replace -> String with "xyzzy".into()
src/span.rs: replace + with - in Span::replace
src/span.rs: replace + with * in Span::replace
src/span.rs: replace && with || in Span::replace
src/span.rs: replace == with != in Span::replace
src/span.rs: replace == with != in Span::replace
src/span.rs: replace || with && in Span::replace
src/span.rs: replace || with && in Span::replace
src/span.rs: replace || with && in Span::replace
src/span.rs: replace < with == in Span::replace
src/span.rs: replace < with > in Span::replace
src/span.rs: replace > with == in Span::replace
src/span.rs: replace > with < in Span::replace
src/span.rs: replace && with || in Span::replace
src/span.rs: replace == with != in Span::replace
src/span.rs: replace < with == in Span::replace
src/span.rs: replace < with > in Span::replace
src/span.rs: replace && with || in Span::replace
src/span.rs: replace == with != in Span::replace
src/span.rs: replace >= with < in Span::replace
src/span.rs: replace == with != in Span::replace
src/span.rs: replace += with -= in Span::replace
src/span.rs: replace += with *= in Span::replace
src/span.rs: replace == with != in Span::replace
src/span.rs: replace += with -= in Span::replace
src/span.rs: replace += with *= in Span::replace
src/span.rs: replace && with || in Span::replace
src/span.rs: replace == with != in Span::replace
src/span.rs: replace == with != in Span::replace
src/span.rs: replace <impl From for Span>::from -> Self with Default::default()
src/span.rs: replace <impl From for Span>::from -> Self with Default::default()
src/span.rs: replace <impl From for Span>::from -> Self with Default::default()
src/span.rs: replace <impl Debug for Span>::fmt -> fmt::Result with Ok(Default::default())
src/span.rs: replace <impl Debug for Span>::fmt -> fmt::Result with Err(::anyhow::anyhow!("mutated!"))
src/tail_file.rs: replace TailFile::last_line -> Result<&str> with Ok("")
src/tail_file.rs: replace TailFile::last_line -> Result<&str> with Ok("xyzzy")
src/tail_file.rs: replace TailFile::last_line -> Result<&str> with Err(::anyhow::anyhow!("mutated!"))
src/tail_file.rs: replace > with == in TailFile::last_line
src/tail_file.rs: replace > with < in TailFile::last_line
src/visit.rs: replace walk_tree -> Result<Discovered> with Ok(Default::default())
src/visit.rs: replace walk_tree -> Result<Discovered> with Err(::anyhow::anyhow!("mutated!"))
src/visit.rs: replace && with || in walk_tree
src/visit.rs: replace || with && in walk_tree
src/visit.rs: replace || with && in walk_tree
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![], vec![]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![], vec![String::new()]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![], vec!["xyzzy".into()]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![Default::default()], vec![]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![Default::default()], vec![String::new()]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![Default::default()], vec!["xyzzy".into()]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Err(::anyhow::anyhow!("mutated!"))
src/visit.rs: replace DiscoveryVisitor<'o>::enter_function -> Arc<Function> with Arc::new(Default::default())
src/visit.rs: replace DiscoveryVisitor<'o>::leave_function with ()
src/visit.rs: replace DiscoveryVisitor<'o>::collect_mutant with ()
src/visit.rs: replace DiscoveryVisitor<'o>::collect_fn_mutants with ()
src/visit.rs: replace == with != in DiscoveryVisitor<'o>::collect_fn_mutants
src/visit.rs: replace DiscoveryVisitor<'o>::in_namespace -> T with Default::default()
src/visit.rs: replace <impl Visit for DiscoveryVisitor<'_>>::visit_item_fn with ()
src/visit.rs: replace || with && in <impl Visit for DiscoveryVisitor<'_>>::visit_item_fn
src/visit.rs: replace || with && in <impl Visit for DiscoveryVisitor<'_>>::visit_item_fn
src/visit.rs: replace <impl Visit for DiscoveryVisitor<'_>>::visit_impl_item_fn with ()
src/visit.rs: replace || with && in <impl Visit for DiscoveryVisitor<'_>>::visit_impl_item_fn
src/visit.rs: replace || with && in <impl Visit for DiscoveryVisitor<'_>>::visit_impl_item_fn
src/visit.rs: replace || with && in <impl Visit for DiscoveryVisitor<'_>>::visit_impl_item_fn
src/visit.rs: replace == with != in <impl Visit for DiscoveryVisitor<'_>>::visit_impl_item_fn
src/visit.rs: replace <impl Visit for DiscoveryVisitor<'_>>::visit_trait_item_fn with ()
src/visit.rs: replace || with && in <impl Visit for DiscoveryVisitor<'_>>::visit_trait_item_fn
src/visit.rs: replace || with && in <impl Visit for DiscoveryVisitor<'_>>::visit_trait_item_fn
src/visit.rs: replace == with != in <impl Visit for DiscoveryVisitor<'_>>::visit_trait_item_fn
src/visit.rs: replace <impl Visit for DiscoveryVisitor<'_>>::visit_item_impl with ()
src/visit.rs: replace == with != in <impl Visit for DiscoveryVisitor<'_>>::visit_item_impl
src/visit.rs: replace <impl Visit for DiscoveryVisitor<'_>>::visit_item_trait with ()
src/visit.rs: replace <impl Visit for DiscoveryVisitor<'_>>::visit_item_mod with ()
src/visit.rs: replace <impl Visit for DiscoveryVisitor<'_>>::visit_expr_binary with ()
src/visit.rs: replace function_body_span -> Option<Span> with None
src/visit.rs: replace function_body_span -> Option<Span> with Some(Default::default())
src/visit.rs: replace find_mod_source -> Result<Option<Utf8PathBuf>> with Ok(None)
src/visit.rs: replace find_mod_source -> Result<Option<Utf8PathBuf>> with Ok(Some(Default::default()))
src/visit.rs: replace find_mod_source -> Result<Option<Utf8PathBuf>> with Err(::anyhow::anyhow!("mutated!"))
src/visit.rs: replace || with && in find_mod_source
src/visit.rs: replace + with - in find_mod_source
src/visit.rs: replace + with * in find_mod_source
src/visit.rs: replace fn_sig_excluded -> bool with true
src/visit.rs: replace fn_sig_excluded -> bool with false
src/visit.rs: replace attrs_excluded -> bool with true
src/visit.rs: replace attrs_excluded -> bool with false
src/visit.rs: replace || with && in attrs_excluded
src/visit.rs: replace || with && in attrs_excluded
src/visit.rs: replace block_is_empty -> bool with true
src/visit.rs: replace block_is_empty -> bool with false
src/visit.rs: replace attr_is_cfg_test -> bool with true
src/visit.rs: replace attr_is_cfg_test -> bool with false
src/visit.rs: replace attr_is_test -> bool with true
src/visit.rs: replace attr_is_test -> bool with false
src/visit.rs: replace path_is -> bool with true
src/visit.rs: replace path_is -> bool with false
src/visit.rs: replace attr_is_mutants_skip -> bool with true
src/visit.rs: replace attr_is_mutants_skip -> bool with false
src/workspace.rs: replace PackageFilter::explicit -> PackageFilter with Default::default()
src/workspace.rs: replace PackageFilter::resolve_auto -> Result<PackageFilter> with Ok(Default::default())
src/workspace.rs: replace PackageFilter::resolve_auto -> Result<PackageFilter> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace == with != in PackageFilter::resolve_auto
src/workspace.rs: replace Workspace::open -> Result<Self> with Ok(Default::default())
src/workspace.rs: replace Workspace::open -> Result<Self> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace Workspace::packages -> Result<Vec<Arc<Package>>> with Ok(vec![])
src/workspace.rs: replace Workspace::packages -> Result<Vec<Arc<Package>>> with Ok(vec![Arc::new(Default::default())])
src/workspace.rs: replace Workspace::packages -> Result<Vec<Arc<Package>>> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace Workspace::package_tops -> Result<Vec<PackageTop>> with Ok(vec![])
src/workspace.rs: replace Workspace::package_tops -> Result<Vec<PackageTop>> with Ok(vec![Default::default()])
src/workspace.rs: replace Workspace::package_tops -> Result<Vec<PackageTop>> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace == with != in Workspace::package_tops
src/workspace.rs: replace Workspace::top_sources -> Result<Vec<SourceFile>> with Ok(vec![])
src/workspace.rs: replace Workspace::top_sources -> Result<Vec<SourceFile>> with Ok(vec![Default::default()])
src/workspace.rs: replace Workspace::top_sources -> Result<Vec<SourceFile>> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace Workspace::discover -> Result<Discovered> with Ok(Default::default())
src/workspace.rs: replace Workspace::discover -> Result<Discovered> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace Workspace::mutants -> Result<Vec<Mutant>> with Ok(vec![])
src/workspace.rs: replace Workspace::mutants -> Result<Vec<Mutant>> with Ok(vec![Default::default()])
src/workspace.rs: replace Workspace::mutants -> Result<Vec<Mutant>> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace direct_package_sources -> Result<Vec<Utf8PathBuf>> with Ok(vec![])
src/workspace.rs: replace direct_package_sources -> Result<Vec<Utf8PathBuf>> with Ok(vec![Default::default()])
src/workspace.rs: replace direct_package_sources -> Result<Vec<Utf8PathBuf>> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace should_mutate_target -> bool with true
src/workspace.rs: replace should_mutate_target -> bool with false
src/workspace.rs: replace || with && in should_mutate_target
src/workspace.rs: replace == with != in should_mutate_target
src/workspace.rs: replace locate_project -> Result<Utf8PathBuf> with Ok(Default::default())
src/workspace.rs: replace locate_project -> Result<Utf8PathBuf> with Err(::anyhow::anyhow!("mutated!"))

